2015-11-04
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Project started.

2015-11-05
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Project configurations...
* Great reference for dll-setup (declspec etc): http://manski.net/2011/11/creating-a-dll-project/
	-dllimport needed when exporting templated classes (can otherwise be omitted).
	-built .exp file contains exported classes/methods
	-old way of linking .lib to using (.exe) project was to first specity project dependencies (build order) then add .lib as 'Additional Dependency' (also .dll:s generate .lib file to link against!)
	-new way (since vs++ 2010): Add to 'References' under project

2015-11-06
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Implemented LogSystem, singleton Core class and Time

2015-11-07
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Investigated unit test frameworks. Tried the integrated cppunittestframework and GTest/GMock. Settled for cppunittestframework in the end since the reason
to use GTest was that there seemed to be some small issues with
using GMock with other test tools than GTest.

There proved to be much extra dependencies / work to be able to use GTest,
so will start with cppunittestframework

To be able to use GTest with Test Explorer, this VS extension is needed:
https://github.com/markusl/GoogleTestRunner

Also, to get it to work properly, F# runtime is needed:
http://stackoverflow.com/questions/18460503/visual-studio-2013-preview-google-test-runner-could-not-load-file-or-assembly-f

2015-11-08
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Tweaked LogSystem and Exception. Implemented log + exception macros.
Disabled two compiler warnings related to dll export.
Scoped mutex lock for logger. Added thread id to log.

2015-11-09
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Added cppcheck: http://cppcheck.sourceforge.net/
Couldn't get cpp check VS integration plugin to work correctly, so followed this: http://www.codeproject.com/Tips/472065/Poor-Man-s-Visual-Studio-Cppcheck-Integration
And then downloaded the Visual Commander VS extension and followed this: http://stackoverflow.com/questions/18985946/running-external-command-on-file-save-in-visual-studio

2015-11-11
Rearranged Hawk defines etc. Abandoned idea of putting much common includes in pch since many .h files should be includes in
other projects (i.e. Game) and the engine will then have incomplete types (Duration.h for example did not include string, but Duration.cpp
compiled in Hawk due to string being part of pch). So should not rely on this.
-Added boost (program_options for ini file parsing for a start)
-Added Config namespace. Parsing ini files.

2015-11-12
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Configured boost build (build only filesystem)
More project settings...

2015-11-14
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Switched from chrono system_clock to steady_clock (run test code with system_clock and changed time.
When setting to an earlier time, the program came to a halt (due to std::this_thread::sleep_for())
Implemented Time & Duration
Config now reloaded in 1 second intervals if file write time changed

2015-11-15
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Thread safe Config + made Config singleton (due to mutex otherwise having to be declared in header file due to
templated Get() having to reside in the header file as well)

2015-11-17
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-SystemManagers now launches thread and systems are updated
-Thread logging

2015-11-21
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-Working thread-safe Event management (using mutexes)
-Tested with boost::lockfree::queue but it will only work with trivially constructed types (i.e. not strings etc)
-Will test later to runtime select lockfree solution if all events dispatch for a certain thread
obeys trivially constructed, destructible and assignable
-Each System now has own eventmanager, and accesses central EventRouter namespace for delegating events
to other systems/threads. Lock taken for each SendEvent<T> which is suboptimal. Will rework.

2015-11-21
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-New event system architecture ideas:
	* Each SystemManager (thread) contains unique EventManager instance
	* EventManager has Register() and Send() methods
	* Each System can access it's parent SystemManager's EventManager
	* It should be possible for EventCollector to flag that lockfreedom is possible if all observed events
	are 'primitive'
	* SystemManager maintains the following structures:
		-outtray [map<type_index, EventWrapper>] (local, single owner, no other threads access this)
		-incoming_queue (protected by mutex or is lockless queue if events allow, accessed by all other threads)
	* Start of each frame:
		-SystemManager delegates to EventManager to dispatch all events in incoming_queue (resides in EventCollector)
			-lock incoming_queue and swap with events_to_handle
			-handle events
	* End of each frame
		-SystemManager delegates to EventManager to distribute events
		-Iterate EventCollectors that listens to event
			* lock (or lockfree) and push to each EventCollector queue
		-Clear outtray
		
2015-11-23
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Decided to keep old event structure for now since each system now has unique lock (thus there
are more mutexes which should probably favor more parallelism). SendEvent also just does one push back.
With above changes, there would be less mutexes and more data to exchange at each synchronization stage.

2015-11-24
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-Some logging tweaks (font)
-WindowManager added + EventMonitoringSystem

2015-11-25
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Renamed systems -> modules
InputSystem, key-codes etc. Best way to exclude unsupported key-codes?
